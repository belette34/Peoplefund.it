<?php// Include abstract modelrequire_once(APPPATH.'core/base_model.php');// Users modelclass Questions_model extends Base_Model {	// Add new user	public function add_question($data){		$this->db->insert('qa_questions', $data); 	}		// Get all question categories    public function get_categories($where = array()) {		// Generate where clause        $where = self::where_string_from_array($where);        // Get categories        $result = $this->db->query("SELECT * FROM `qa_cats` $where ORDER BY `sort_id` DESC")->result();		// Return data		return $result;    }		// Get all question categories    public function get_categories_admin() {        // Get categories        $result = $this->db->query("SELECT * FROM `qa_cats` ORDER BY `sort_id` DESC")->result();				foreach ($result as $category) {			$category->category_questions = $this->db->query("SELECT * FROM `qa_questions` WHERE `category_id` = ".(int) $category->id)->num_rows();		}				// Return data		return $result;    }	// Get all question questions    public function get_questions($where = array(), $limit = array()) {		// Generate where clause		if (isset($where['keyword'])) {			$where = "WHERE (q.text LIKE '%".mysql_real_escape_string($where['keyword'])."%')";		} else {			$where = self::where_string_from_array($where);		}		// Generate limit		$limit = self::generate_limit($limit);				$query = 	"SELECT q.* ,c.title AS category_name, c.slug AS category_slug 					FROM `qa_questions` AS q					LEFT JOIN `qa_cats` AS c ON q.category_id = c.id					$where					ORDER BY `sort_id` DESC, `posted_at` DESC					$limit";        // Get questions        $result = $this->db->query($query)->result();		// Get number of answers for each questions		foreach ($result as $question) {			$question->question_answers = self::count_question_answers($question->id);		}		// Return data		return $result;    }		// Get all question categories    public function get_questions_admin($where = array(), $limit = array()) {		// Generate where clause        $where = self::where_string_from_array($where);		// Generate limit		$limit = self::generate_limit($limit); 		$query = 	"SELECT q.* ,c.title AS category_name, c.slug AS category_slug 					FROM `qa_questions` AS q					LEFT JOIN `qa_cats` AS c ON q.category_id = c.id					$where					ORDER BY  `posted_at` DESC					$limit";        // Get categories        $result = $this->db->query($query)->result();				foreach ($result as $question) {			$question->member_questions = self::count_member_questions($question->member_id);			$question->question_answers = self::count_question_answers($question->id);		}				// Return data		return $result;    }		public function count_questions($where = array()) {		// Generate where clause		if (isset($where['keyword'])) {			$where = "WHERE (q.text LIKE '%".mysql_real_escape_string($where['keyword'])."%')";		} else {			$where = self::where_string_from_array($where);		}				// Get member questions		$result = $this->db->query("SELECT * FROM `qa_questions`")->num_rows();		// Return results		return $result;	}		public function count_member_questions($member_id) {		// Get member questions		$result = $this->db->query("SELECT * FROM `qa_questions` WHERE `member_id` = ".(int) $member_id)->num_rows();		// Return results		return $result;	}		public function save_question($data, $idquestion) {		$this->db->where('id', $idquestion);		$this->db->update('qa_questions', $data); 	}			public function delete_question($idquestion) {		$this->db->delete('questions', array('id' => $idquestion)); 	}		// Move category	public function move_category($idcategory, $direction){				// Get current category data		$data = $this->db->query("SELECT * FROM `qa_cats` WHERE id = $idcategory LIMIT 1")->result();		$data = reset( $data );		$now = $data->sort_id;		// Move up		if($direction == 'up'){			$next = $this->db->query("SELECT `sort_id` FROM qa_cats WHERE `sort_id` > '$now' ORDER BY `sort_id` ASC LIMIT 1")->result();			if(!empty($next)){				$next = reset($next[0]);				$this->db->query("UPDATE qa_cats SET `sort_id` = '$now' WHERE `sort_id` = '$next' ");				$this->db->query("UPDATE qa_cats SET `sort_id` = '$next' WHERE id = '$idcategory'");			}					// Move down		} else {			$next = $this->db->query("SELECT `sort_id` FROM qa_cats WHERE `sort_id` < '$now' ORDER BY `sort_id` DESC LIMIT 1")->result();						if(!empty($next)){				$next = reset($next[0]);				$this->db->query("UPDATE qa_cats SET `sort_id` = '$now' WHERE `sort_id` = '$next' ");				$this->db->query("UPDATE qa_cats SET `sort_id` = '$next' WHERE id = '$idcategory'");			}		}	}		public function save_category($data, $idcategory) {		$this->db->where('id', $idcategory);		$this->db->update('qa_cats', $data); 	}		// Add new category	public function add_category($data){		$this->db->insert('qa_cats', $data); 	}		// Delete category	public function delete_category($idcategory){		$this->db->delete('qa_cats', array('id' => $idcategory)); 	}		// Get next order id	public function get_category_next_order_id($where = array()){			// Generate where clause        $where = self::where_string_from_array($where);		        // Get categories        $result = $this->db->query("SELECT `sort_id` FROM `qa_cats` $where ORDER BY `sort_id` DESC LIMIT 1");				// Fetch data		$return = (array) reset($result->result());				// If no categories are found		if(empty($return['sort_id'])){			$return['sort_id'] = 0;		}				// Return data		return ($return['sort_id'] + 1);	}		// Add new answer	public function add_answer($data) {		$this->db->insert('qa_answers', $data); 	}		// Get all question questions    public function get_answers($where = array()) {		// Generate where clause        $where = self::where_string_from_array($where);		$query = 	"SELECT * 					FROM `qa_answers`					$where					ORDER BY `helpful_total` DESC, `posted_at` DESC";        // Get questions        $result = $this->db->query($query)->result();				foreach ($result as $answer) {			$user = $this->db->query("SELECT username FROM `users` WHERE `iduser` = ".$answer->member_id)->result();			$answer->username = $user[0]->username;		}		// Return data		return $result;    }		// Get all question questions    public function get_answers_admin($where = array(), $limit = array()) {		// Generate where clause        $where = self::where_string_from_array($where);		// Generate limit		$limit = self::generate_limit($limit);		$query = 	"SELECT * 					FROM `qa_answers`					$where					ORDER BY `helpful_total` DESC, `posted_at` DESC					$limit";        // Get questions        $result = $this->db->query($query)->result();				foreach ($result as $answer) {			$user = $this->db->query("SELECT username FROM `users` WHERE `iduser` = ".$answer->member_id)->result();			$answer->username = $user[0]->username;			$answer->member_answers = self::count_member_answers($answer->member_id);			$answer->total_answers = self::count_question_answers($answer->question_id);		}		// Return data		return $result;    }		public function get_vote($answer_id, $member_id) {		 $result = $this->db->query( 'SELECT answer_id FROM qa_helpful WHERE answer_id = '.$answer_id.' AND member_id = '.$member_id.' LIMIT 1' )->result();		 return $result;	}		public function add_helpful($answer_id, $member_id, $helpful) {		$result = $this->db->query( "INSERT INTO qa_helpful ( answer_id, member_id, helpful ) VALUES (".$answer_id.",".$member_id.",'".$helpful."')" );		if($result)			return TRUE;		else			return FALSE;	}		public function update_helpful_answer($helpful, $answer_id) {		$result = $this->db->query( 'UPDATE qa_answers SET ' . ( $helpful == 'yes' ? 'helpful_cnt = ( `helpful_cnt` + 1 ), ' : '' ) . 'helpful_total = ( `helpful_total` + 1 ) WHERE id = ? LIMIT 1',$answer_id );		if($result)			return TRUE;		else			return FALSE;	}	public function count_answers() {		// Get answers		$result = $this->db->query("SELECT * FROM `qa_answers`")->num_rows();		// Return results		return $result;	}		public function count_member_answers($member_id) {		// Get question answers		$result = $this->db->query("SELECT * 									FROM `qa_answers` 									WHERE member_id = $member_id									AND status = 'active'")->num_rows();		// Return results		return $result;				// Return results		return $result;	}		public function count_question_answers($question_id) {		// Get question answers		$result = $this->db->query("SELECT * 									FROM `qa_answers` 									WHERE question_id = $question_id									AND status = 'active'")->num_rows();		// Return results		return $result;				// Return results		return $result;	}		// Delete category	public function delete_answer($idanswer){		$this->db->delete('qa_answers', array('id' => $idanswer)); 	}		public function delete_answer($data, $idanswer) {		$this->db->where('id', $idanswer);		$this->db->update('qa_answers', $data); 	}	}